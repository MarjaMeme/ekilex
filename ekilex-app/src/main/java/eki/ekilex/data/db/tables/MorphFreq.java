/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.MorphFreqRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MorphFreq extends TableImpl<MorphFreqRecord> {

    private static final long serialVersionUID = -944202043;

    /**
     * The reference instance of <code>public.morph_freq</code>
     */
    public static final MorphFreq MORPH_FREQ = new MorphFreq();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MorphFreqRecord> getRecordType() {
        return MorphFreqRecord.class;
    }

    /**
     * The column <code>public.morph_freq.id</code>.
     */
    public final TableField<MorphFreqRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('morph_freq_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.morph_freq.freq_corp_id</code>.
     */
    public final TableField<MorphFreqRecord, Long> FREQ_CORP_ID = createField(DSL.name("freq_corp_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.morph_freq.morph_code</code>.
     */
    public final TableField<MorphFreqRecord, String> MORPH_CODE = createField(DSL.name("morph_code"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.morph_freq.value</code>.
     */
    public final TableField<MorphFreqRecord, BigDecimal> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.NUMERIC(12, 7).nullable(false), this, "");

    /**
     * The column <code>public.morph_freq.rank</code>.
     */
    public final TableField<MorphFreqRecord, Long> RANK = createField(DSL.name("rank"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.morph_freq</code> table reference
     */
    public MorphFreq() {
        this(DSL.name("morph_freq"), null);
    }

    /**
     * Create an aliased <code>public.morph_freq</code> table reference
     */
    public MorphFreq(String alias) {
        this(DSL.name(alias), MORPH_FREQ);
    }

    /**
     * Create an aliased <code>public.morph_freq</code> table reference
     */
    public MorphFreq(Name alias) {
        this(alias, MORPH_FREQ);
    }

    private MorphFreq(Name alias, Table<MorphFreqRecord> aliased) {
        this(alias, aliased, null);
    }

    private MorphFreq(Name alias, Table<MorphFreqRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MorphFreq(Table<O> child, ForeignKey<O, MorphFreqRecord> key) {
        super(child, key, MORPH_FREQ);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MORPH_FREQ_CORP_ID_IDX, Indexes.MORPH_FREQ_MORPH_CODE_IDX);
    }

    @Override
    public Identity<MorphFreqRecord, Long> getIdentity() {
        return Keys.IDENTITY_MORPH_FREQ;
    }

    @Override
    public UniqueKey<MorphFreqRecord> getPrimaryKey() {
        return Keys.MORPH_FREQ_PKEY;
    }

    @Override
    public List<UniqueKey<MorphFreqRecord>> getKeys() {
        return Arrays.<UniqueKey<MorphFreqRecord>>asList(Keys.MORPH_FREQ_PKEY, Keys.MORPH_FREQ_FREQ_CORP_ID_MORPH_CODE_KEY);
    }

    @Override
    public List<ForeignKey<MorphFreqRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MorphFreqRecord, ?>>asList(Keys.MORPH_FREQ__MORPH_FREQ_FREQ_CORP_ID_FKEY, Keys.MORPH_FREQ__MORPH_FREQ_MORPH_CODE_FKEY);
    }

    public FreqCorp freqCorp() {
        return new FreqCorp(this, Keys.MORPH_FREQ__MORPH_FREQ_FREQ_CORP_ID_FKEY);
    }

    public Morph morph() {
        return new Morph(this, Keys.MORPH_FREQ__MORPH_FREQ_MORPH_CODE_FKEY);
    }

    @Override
    public MorphFreq as(String alias) {
        return new MorphFreq(DSL.name(alias), this);
    }

    @Override
    public MorphFreq as(Name alias) {
        return new MorphFreq(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MorphFreq rename(String name) {
        return new MorphFreq(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MorphFreq rename(Name name) {
        return new MorphFreq(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, String, BigDecimal, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
