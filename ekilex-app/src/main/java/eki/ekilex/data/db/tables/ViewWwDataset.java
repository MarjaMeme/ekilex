/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.ViewWwDatasetRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwDataset extends TableImpl<ViewWwDatasetRecord> {

    private static final long serialVersionUID = -54782084;

    /**
     * The reference instance of <code>public.view_ww_dataset</code>
     */
    public static final ViewWwDataset VIEW_WW_DATASET = new ViewWwDataset();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwDatasetRecord> getRecordType() {
        return ViewWwDatasetRecord.class;
    }

    /**
     * The column <code>public.view_ww_dataset.code</code>.
     */
    public final TableField<ViewWwDatasetRecord, String> CODE = createField(DSL.name("code"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.view_ww_dataset.type</code>.
     */
    public final TableField<ViewWwDatasetRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>public.view_ww_dataset.name</code>.
     */
    public final TableField<ViewWwDatasetRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_dataset.description</code>.
     */
    public final TableField<ViewWwDatasetRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_dataset.contact</code>.
     */
    public final TableField<ViewWwDatasetRecord, String> CONTACT = createField(DSL.name("contact"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.view_ww_dataset.is_superior</code>.
     */
    public final TableField<ViewWwDatasetRecord, Boolean> IS_SUPERIOR = createField(DSL.name("is_superior"), org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.view_ww_dataset.order_by</code>.
     */
    public final TableField<ViewWwDatasetRecord, Long> ORDER_BY = createField(DSL.name("order_by"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.view_ww_dataset</code> table reference
     */
    public ViewWwDataset() {
        this(DSL.name("view_ww_dataset"), null);
    }

    /**
     * Create an aliased <code>public.view_ww_dataset</code> table reference
     */
    public ViewWwDataset(String alias) {
        this(DSL.name(alias), VIEW_WW_DATASET);
    }

    /**
     * Create an aliased <code>public.view_ww_dataset</code> table reference
     */
    public ViewWwDataset(Name alias) {
        this(alias, VIEW_WW_DATASET);
    }

    private ViewWwDataset(Name alias, Table<ViewWwDatasetRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwDataset(Name alias, Table<ViewWwDatasetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_dataset\" as  SELECT dataset.code,\n    dataset.type,\n    dataset.name,\n    dataset.description,\n    dataset.contact,\n    dataset.is_superior,\n    dataset.order_by\n   FROM dataset\n  WHERE (dataset.is_public = true)\n  ORDER BY dataset.order_by;"));
    }

    public <O extends Record> ViewWwDataset(Table<O> child, ForeignKey<O, ViewWwDatasetRecord> key) {
        super(child, key, VIEW_WW_DATASET);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwDataset as(String alias) {
        return new ViewWwDataset(DSL.name(alias), this);
    }

    @Override
    public ViewWwDataset as(Name alias) {
        return new ViewWwDataset(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwDataset rename(String name) {
        return new ViewWwDataset(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwDataset rename(Name name) {
        return new ViewWwDataset(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, Boolean, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
