/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Indexes;
import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.WordRelationParamRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class WordRelationParam extends TableImpl<WordRelationParamRecord> {

    private static final long serialVersionUID = -1810353603;

    /**
     * The reference instance of <code>public.word_relation_param</code>
     */
    public static final WordRelationParam WORD_RELATION_PARAM = new WordRelationParam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WordRelationParamRecord> getRecordType() {
        return WordRelationParamRecord.class;
    }

    /**
     * The column <code>public.word_relation_param.id</code>.
     */
    public final TableField<WordRelationParamRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('word_relation_param_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.word_relation_param.word_relation_id</code>.
     */
    public final TableField<WordRelationParamRecord, Long> WORD_RELATION_ID = createField(DSL.name("word_relation_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.word_relation_param.name</code>.
     */
    public final TableField<WordRelationParamRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.word_relation_param.value</code>.
     */
    public final TableField<WordRelationParamRecord, BigDecimal> VALUE = createField(DSL.name("value"), org.jooq.impl.SQLDataType.NUMERIC(5, 4).nullable(false), this, "");

    /**
     * Create a <code>public.word_relation_param</code> table reference
     */
    public WordRelationParam() {
        this(DSL.name("word_relation_param"), null);
    }

    /**
     * Create an aliased <code>public.word_relation_param</code> table reference
     */
    public WordRelationParam(String alias) {
        this(DSL.name(alias), WORD_RELATION_PARAM);
    }

    /**
     * Create an aliased <code>public.word_relation_param</code> table reference
     */
    public WordRelationParam(Name alias) {
        this(alias, WORD_RELATION_PARAM);
    }

    private WordRelationParam(Name alias, Table<WordRelationParamRecord> aliased) {
        this(alias, aliased, null);
    }

    private WordRelationParam(Name alias, Table<WordRelationParamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> WordRelationParam(Table<O> child, ForeignKey<O, WordRelationParamRecord> key) {
        super(child, key, WORD_RELATION_PARAM);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WORD_RELATION_PARAM_WORD_RELATION_ID_IDX);
    }

    @Override
    public Identity<WordRelationParamRecord, Long> getIdentity() {
        return Keys.IDENTITY_WORD_RELATION_PARAM;
    }

    @Override
    public UniqueKey<WordRelationParamRecord> getPrimaryKey() {
        return Keys.WORD_RELATION_PARAM_PKEY;
    }

    @Override
    public List<UniqueKey<WordRelationParamRecord>> getKeys() {
        return Arrays.<UniqueKey<WordRelationParamRecord>>asList(Keys.WORD_RELATION_PARAM_PKEY, Keys.WORD_RELATION_PARAM_WORD_RELATION_ID_NAME_KEY);
    }

    @Override
    public List<ForeignKey<WordRelationParamRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<WordRelationParamRecord, ?>>asList(Keys.WORD_RELATION_PARAM__WORD_RELATION_PARAM_WORD_RELATION_ID_FKEY);
    }

    public WordRelation wordRelation() {
        return new WordRelation(this, Keys.WORD_RELATION_PARAM__WORD_RELATION_PARAM_WORD_RELATION_ID_FKEY);
    }

    @Override
    public WordRelationParam as(String alias) {
        return new WordRelationParam(DSL.name(alias), this);
    }

    @Override
    public WordRelationParam as(Name alias) {
        return new WordRelationParam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public WordRelationParam rename(String name) {
        return new WordRelationParam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public WordRelationParam rename(Name name) {
        return new WordRelationParam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, String, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
