/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Keys;
import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.TempPNamesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TempPNames extends TableImpl<TempPNamesRecord> {

    private static final long serialVersionUID = 22994804;

    /**
     * The reference instance of <code>public.temp_p_names</code>
     */
    public static final TempPNames TEMP_P_NAMES = new TempPNames();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TempPNamesRecord> getRecordType() {
        return TempPNamesRecord.class;
    }

    /**
     * The column <code>public.temp_p_names.name</code>.
     */
    public final TableField<TempPNamesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * Create a <code>public.temp_p_names</code> table reference
     */
    public TempPNames() {
        this(DSL.name("temp_p_names"), null);
    }

    /**
     * Create an aliased <code>public.temp_p_names</code> table reference
     */
    public TempPNames(String alias) {
        this(DSL.name(alias), TEMP_P_NAMES);
    }

    /**
     * Create an aliased <code>public.temp_p_names</code> table reference
     */
    public TempPNames(Name alias) {
        this(alias, TEMP_P_NAMES);
    }

    private TempPNames(Name alias, Table<TempPNamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private TempPNames(Name alias, Table<TempPNamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TempPNames(Table<O> child, ForeignKey<O, TempPNamesRecord> key) {
        super(child, key, TEMP_P_NAMES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<TempPNamesRecord> getPrimaryKey() {
        return Keys.TEMP_P_NAMES_PKEY;
    }

    @Override
    public List<UniqueKey<TempPNamesRecord>> getKeys() {
        return Arrays.<UniqueKey<TempPNamesRecord>>asList(Keys.TEMP_P_NAMES_PKEY);
    }

    @Override
    public TempPNames as(String alias) {
        return new TempPNames(DSL.name(alias), this);
    }

    @Override
    public TempPNames as(Name alias) {
        return new TempPNames(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TempPNames rename(String name) {
        return new TempPNames(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TempPNames rename(Name name) {
        return new TempPNames(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
