/*
 * This file is generated by jOOQ.
 */
package eki.ekilex.data.db.tables;


import eki.ekilex.data.db.Public;
import eki.ekilex.data.db.tables.records.ViewWwCountsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ViewWwCounts extends TableImpl<ViewWwCountsRecord> {

    private static final long serialVersionUID = 1286291293;

    /**
     * The reference instance of <code>public.view_ww_counts</code>
     */
    public static final ViewWwCounts VIEW_WW_COUNTS = new ViewWwCounts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ViewWwCountsRecord> getRecordType() {
        return ViewWwCountsRecord.class;
    }

    /**
     * The column <code>public.view_ww_counts.dataset_code</code>.
     */
    public final TableField<ViewWwCountsRecord, String> DATASET_CODE = createField(DSL.name("dataset_code"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.view_ww_counts.lang</code>.
     */
    public final TableField<ViewWwCountsRecord, String> LANG = createField(DSL.name("lang"), org.jooq.impl.SQLDataType.CHAR(3), this, "");

    /**
     * The column <code>public.view_ww_counts.word_record_count</code>.
     */
    public final TableField<ViewWwCountsRecord, Long> WORD_RECORD_COUNT = createField(DSL.name("word_record_count"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_counts.word_value_count</code>.
     */
    public final TableField<ViewWwCountsRecord, Long> WORD_VALUE_COUNT = createField(DSL.name("word_value_count"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.view_ww_counts.meaning_record_count</code>.
     */
    public final TableField<ViewWwCountsRecord, Long> MEANING_RECORD_COUNT = createField(DSL.name("meaning_record_count"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.view_ww_counts</code> table reference
     */
    public ViewWwCounts() {
        this(DSL.name("view_ww_counts"), null);
    }

    /**
     * Create an aliased <code>public.view_ww_counts</code> table reference
     */
    public ViewWwCounts(String alias) {
        this(DSL.name(alias), VIEW_WW_COUNTS);
    }

    /**
     * Create an aliased <code>public.view_ww_counts</code> table reference
     */
    public ViewWwCounts(Name alias) {
        this(alias, VIEW_WW_COUNTS);
    }

    private ViewWwCounts(Name alias, Table<ViewWwCountsRecord> aliased) {
        this(alias, aliased, null);
    }

    private ViewWwCounts(Name alias, Table<ViewWwCountsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"view_ww_counts\" as ( SELECT '*'::character varying AS dataset_code,\n    w.lang,\n    count(w.id) AS word_record_count,\n    count(DISTINCT w.value) AS word_value_count,\n    count(DISTINCT l.meaning_id) AS meaning_record_count\n   FROM lexeme l,\n    word w\n  WHERE ((l.word_id = w.id) AND ((l.dataset_code)::text <> 'ety'::text))\n  GROUP BY w.lang\n  ORDER BY w.lang)\nUNION ALL\n( SELECT l.dataset_code,\n    w.lang,\n    count(w.id) AS word_record_count,\n    count(DISTINCT w.value) AS word_value_count,\n    count(DISTINCT l.meaning_id) AS meaning_record_count\n   FROM lexeme l,\n    word w\n  WHERE ((l.word_id = w.id) AND ((l.dataset_code)::text <> 'ety'::text))\n  GROUP BY l.dataset_code, w.lang\n  ORDER BY l.dataset_code, w.lang);"));
    }

    public <O extends Record> ViewWwCounts(Table<O> child, ForeignKey<O, ViewWwCountsRecord> key) {
        super(child, key, VIEW_WW_COUNTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public ViewWwCounts as(String alias) {
        return new ViewWwCounts(DSL.name(alias), this);
    }

    @Override
    public ViewWwCounts as(Name alias) {
        return new ViewWwCounts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwCounts rename(String name) {
        return new ViewWwCounts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ViewWwCounts rename(Name name) {
        return new ViewWwCounts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, Long, Long, Long> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
